{"version":3,"sources":["getWinner.js","custom_hooks/useBoard.js","components/Gobang.js","components/GameInfo.js","App.js","index.js"],"names":["countChess","board","x","y","directionX","directionY","currentChess","tempX","tempY","total","getWinner","useBoard","useState","Array","fill","setBoard","winner","setWinner","isBlackNext","useRef","currentX","currentY","useEffect","current","handleChessClick","value","result","map","row","col","handleUpdateBoard","Square","styled","div","props","rowIndex","colIndex","ChessItem","Gobang","onClick","Info","GameDesc","ChessIcon","keyframes","pulse","WinnerInfo","Button","button","handleRestart","window","location","reload","RestartBtn","MemoRestartBtn","memo","GameInfo","Board","Row","Footer","Game","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a7fc88d.chunk.js","sourcesContent":["const countChess = (board, x, y, directionX, directionY) => {\n  const currentChess = board[y][x];\n  let tempX = x + directionX;\n  let tempY = y + directionY;\n  let total = 0;\n\n  while (board[tempY] && board[tempY][tempX] === currentChess) {\n    tempX += directionX;\n    tempY += directionY;\n    total++;\n  }\n  return total;\n}\n\nconst getWinner = (board, x, y) => {\n  if (\n    countChess(board, x, y, 0, 1) + countChess(board, x, y, 0, -1) >= 4 ||\n    countChess(board, x, y, 1, 0) + countChess(board, x, y, -1, 0) >= 4 ||\n    countChess(board, x, y, 1, 1) + countChess(board, x, y, -1, -1) >= 4 ||\n    countChess(board, x, y, 1, -1) + countChess(board, x, y, -1, 1) >= 4\n  ) {\n    return board[y][x]; // 回傳黑子還是白子\n  }\n}\n\nexport default getWinner;","import { useState, useRef, useEffect } from 'react';\nimport getWinner from '../getWinner';\n\nconst BOARD_SIZE = 19;\n\nconst useBoard = () => {\n  // board[y][x] 來存黑子白子\n  const [board, setBoard] = useState(\n    Array(BOARD_SIZE).fill(Array(BOARD_SIZE).fill(null)));\n  const [winner, setWinner] = useState(null);\n\n  const isBlackNext = useRef(true);\n  const currentX = useRef();\n  const currentY = useRef();\n\n  const handleUpdateBoard = (x, y, result) => {\n    setBoard(\n      board.map((row, currentY) => {\n        if (currentY !== y) return row;\n\n        return row.map((col, currentX) => {\n          if (currentX !== x) return col;\n          return result;\n        })\n      })\n    );\n  };\n\n  const handleChessClick = (x, y, value) => {\n    // 已經有存棋子的\n    if (value) return;\n\n    currentX.current = x;\n    currentY.current = y;\n    handleUpdateBoard(x, y, isBlackNext.current ? 'black' : 'white');\n    isBlackNext.current = !isBlackNext.current; // 換人\n  };\n\n  // 棋盤都全渲染好後判斷輸贏\n  useEffect(() => {\n    if (!currentX.current || !currentY.current) return;\n\n    setWinner(getWinner(board, currentX.current, currentY.current));\n  }, [board]);\n\n  return {\n    board,\n    winner,\n    isBlackNext,\n    handleChessClick\n  }\n};\n\nexport default useBoard;","import styled from 'styled-components';\n\nconst Square = styled.div`\n  width: 32px;\n  height: 32px;\n  background: #BC9272;\n  position: relative;\n  \n  // 格線直線\n  &::before {\n    content: '';\n    height: 100%;\n    width: 2px;\n    background: #615754;\n    position: absolute;\n    top: 0;\n    left: 50%;\n\n    // 上下邊界\n    ${props => props.rowIndex === 0 && `height: 50%; top: 50%;`};\n    ${props => props.rowIndex === 18 && `height: 50%;`}\n  }\n  // 格線橫線\n  &::after {\n    content: '';\n    width: 100%;\n    height: 2px;\n    background: #615754;\n    position: absolute;\n    top: 50%;\n\n    // 左右邊界\n    ${props => props.colIndex === 0 && `width: 50%; left: 50%;`};\n    ${props => props.colIndex === 18 && `width: 55%;`};\n  }\n`;\n\nconst ChessItem = styled.div`\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  position: absolute;\n  transform: scale(0.8);\n  top: 0;\n  left: 3%;\n  z-index: 1;\n\n  // 判斷黑白棋\n  ${props => props.value === 'black' && `\n    background: black; box-shadow: 3px 3px 6px #666;`};\n  ${props => props.value === 'white' && `\n    background: white; box-shadow: 3px 3px 6px #666;`};\n\n  // hover 陰影\n  ${props => !props.value && `\n    &:hover {\n      background: rgba(0, 0, 1, 0.2);\n    }\n  `}\n`;\n\nconst Gobang = ({ rowIndex, colIndex, board, handleChessClick, winner }) => {\n  const value = board[rowIndex][colIndex];\n  const handleClick = () => {\n    if (winner) return;\n    handleChessClick(colIndex, rowIndex, value);\n  };\n\n  return (\n    <Square rowIndex={rowIndex} colIndex={colIndex} onClick={handleClick}>\n      <ChessItem value={value} />\n    </Square>\n  );\n};\n\nexport default Gobang;","import { memo } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { pulse } from 'react-animations';\n\n\nconst Info = styled.div`\n  font-family: 'Roboto Mono', monospace; \n  color: #498ac3;\n  position: relative;\n\n  @media screen and (min-width: 1000px) {\n    width: 300px;\n  }\n`;\n\nconst GameDesc = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst ChessIcon = styled.div`\n  width: 26px;\n  height: 26px;\n  border-radius: 50%;\n  margin-left: 10px;\n  animation: 0.8s ${keyframes`${pulse}`} infinite;\n\n  ${props => props.isBlackNext && `\n    background: black; box-shadow: 2px 6px 8px #666;`};\n  ${props => !props.isBlackNext && `\n    background: white; box-shadow: 2px 6px 8px #666;`};\n`;\n\nconst WinnerInfo = styled.div`\n  background: #1d59b5;\n  border-radius: 6px;\n  padding: 30px 40px;\n  text-align: center;\n  position: absolute;\n  top: 0;\n  right: 16px;\n\n  & div {\n    font-size: 20px;\n    font-weight: bold;\n    color: white;\n    margin-bottom: 20px;\n  }\n\n  @media screen and (min-width: 1000px) {\n    top: 200px;\n  }\n`;\n\nconst Button = styled.button`\nborder: transparent;\nbackground: black;\nborder-radius: 20px;\npadding: 10px 16px;\ncolor: white;\ncursor: pointer;\ntransition: transform 0.3s;\n\n&:hover {\n  transform: scale(1.1);\n}\n`;\n\nconst handleRestart = () => {\n  window.location.reload();\n}\n\nconst RestartBtn = () => {\n  return (\n    <Button onClick={handleRestart}>RESTART</Button>\n  );\n};\n\nconst MemoRestartBtn = memo(RestartBtn);\n\nconst GameInfo = ({ isBlackNext, winner }) => {\n  return (\n    <Info>\n      <h1>五子棋 Gobang</h1>\n      {!winner && (\n        <>\n          <GameDesc>\n            <h3>Next Player ► ▷ ► {isBlackNext ? '黑子' : '白子'}</h3>\n            <ChessIcon isBlackNext={isBlackNext} />\n          </GameDesc>\n          <MemoRestartBtn />\n        </>\n      )}\n      {winner && (\n        <WinnerInfo>\n          <div>\n            {winner === 'black' && `> 獲勝的是黑子 <`}\n            {winner === 'white' && '> 獲勝的是白子 <'}\n          </div>\n          <MemoRestartBtn />\n        </WinnerInfo>\n      )}\n    </Info>\n  )\n};\n\nexport default GameInfo;","import React from 'react';\nimport styled from 'styled-components';\nimport './index.css';\n\nimport useBoard from './custom_hooks/useBoard';\nimport Gobang from './components/Gobang';\nimport GameInfo from './components/GameInfo';\n\nconst Board = styled.div`\n  display: inline-block;\n  margin-right: 40px;\n`;\n\nconst Row = styled.div`\n  display: flex;\n`;\n\nconst Footer = styled.div`\n  width: 100%;\n  background: black;\n  padding: 16px 0;\n  color: white;\n  font-size: 14px;\n  text-align: center;\n  margin-top: 120px;\n\n  @media screen and (min-width: 1000px) {\n    margin-top: 0;\n  }\n`;\n\nconst Game = () => {\n  const { board, winner, isBlackNext, handleChessClick } = useBoard();\n\n  return (\n    <>\n      <div className=\"game\">\n        <Board>\n          {\n            board.map((row, y) => {\n              return (\n                <Row key={y}>\n                  {\n                    row.map((col, x) => {\n                      return (\n                        <Gobang\n                          key={x}\n                          rowIndex={y}\n                          colIndex={x}\n                          board={board}\n                          handleChessClick={handleChessClick}\n                          winner={winner}\n                        />\n                      )\n                    })\n                  }\n                </Row>\n              )\n            })\n          }\n        </Board>\n        <GameInfo isBlackNext={isBlackNext.current} winner={winner} />\n      </div>\n      <Footer>\n        Copyright © 2021 YichenLiu Gobang All rights Reserved.\n      </Footer>\n    </>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './App';\n\nReactDOM.render(<Game />, document.getElementById('root')\n);"],"sourceRoot":""}